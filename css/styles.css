:root {
    
    /* Paleta de colores */

    --color-primario: #48c9b0;
    --color-secundario: #7fb3d5;
    --blanco: #ffffff;
    --negro: #000000;
    --color-fondo: #dfe9f3;
    --color-fondo-iconos: #fff700;
}

html {
    font-size: 62.5%;
    box-sizing: border-box;
} 

*, *:before, *:after {
    box-sizing: inherit;
}
  
body {
    font-size: 16px;
    font-family: "Roboto", sans-serif;
    background-image: linear-gradient(to top, var(--color-fondo) 0%, var(--blanco) 100%);

    /* La propiedad background image nos permite usar el valor linear-gradient el cual nos permite agregar
    un degradado a todo el documento html.
    La estructura de linear-gradient es la siguiente:
    background-image: linear-gradient(to where, color inicial %0 (porcentaje del documento a iniciar), color final %100 (porcientaje del documento a pintar))*/
}

/* 1 rem = 10px */

h1, h2, h3 {
    text-align: center;
}

.titulo {
    text-align: center;
}

.titulo span {
    font-size: 2rem;
}

.contenedor {
    max-width: 120rem;
    margin-top: 0;
    margin-right: auto;
    margin-bottom: 0;
    margin-left: auto;
}

.navegacion-bg {
    background-color: var(--color-secundario);
}

.navegacion-principal {
    display: flex;
    flex-direction: column;
    align-items: center;
}

@media (min-width: 768px) {
    .navegacion-principal {
        flex-direction: row;
        justify-content: space-between;
    }
}

.navegacion-principal a {
    text-decoration: none;
    color: var(--negro);
    padding: 1rem;
}

.navegacion-principal a:hover {
    background-color: var(--color-primario);
    color: var(--blanco);
    font-weight: bold;
}

.hero {
    background-image: url(../img/hero.jpg);
    background-repeat: no-repeat;
    background-size: cover;
    height: 45rem;
    position: relative;
}

.contenido-hero {
    position: absolute;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, .5);
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
}

.contenido-hero h2, .contenido-hero p {
    color: var(--blanco);
}

.ubicacion {
    display: flex;
    align-items: end;
}

.boton {
    background-color: var(--color-secundario);
    text-decoration: none;
    color: var(--negro);
    text-transform:uppercase;
    font-weight: bold;
    padding: .7rem 1rem;
    border-radius: .5rem;
    margin-top: 3rem;
    width: 50%;
    text-align: center;
    border: none;
}

.enviar {
    width: 100%;
}

@media (min-width:768px) {
    .contenedor-enviar {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
    }
}

@media (min-width:768px) {
    .boton {
        width: auto;
    }
}

.boton:hover {
    background-color: var(--color-primario);
    color: var(--blanco);
    cursor: pointer;
}

.sombra {
    -webkit-box-shadow: 0px 0px 13px 0px rgba(0,0,0,0.75);
    -moz-box-shadow: 0px 0px 13px 0px rgba(0,0,0,0.75);
    box-shadow: 0px 0px 13px 0px rgba(0,0,0,0.75);
    padding: 1rem 2rem;
    margin-top: 2rem;
    border-radius: 1rem;
    background-color: var(--blanco);
}

.servicios {
    display: flex;
    flex-direction: column;
}

@media (min-width: 768px) {
    .servicios {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 1rem;
    }
}

/*
.servicios {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    grid-gap: 1rem;
    /*
    grid-template-columns: 30rem 30rem; /* permite definir el número de columnas 
    grid-template-rows: 30rem 60rem; /* permite definir el tamaño para cada fila 
    
}
*/

.servicio {
    display: flex;
    flex-direction: column;
    align-items: center;
}

.servicio h3 {
    color: var(--negro);
}

.servicio .iconos {
    height: 15rem;
    width: 15rem;
    border-radius: 50%;
    background-color: var(--color-fondo-iconos);
    display: flex;
    justify-content: space-evenly;
    align-items: center;
}

.servicio p {
    text-align: center;
    line-height: 1.5;
}

.formulario {
    background-color: gray; /* puede o no estar agregado a la paleta de colores*/
    padding: 2rem;
    border-radius: 1rem;
    width: min(60rem, 100%);
    margin: 0 auto;
}

.formulario fieldset {
    border: none;
}

.formulario .legend {
    margin-bottom: 2rem;
}

.formulario legend {
    text-transform: uppercase;
    text-align: center;
    font-weight: bold;
    color: var(--blanco);
}

.campo label {
    display: block;
    margin-bottom: .5rem;
    color: var(--blanco);
    font-weight: bold;
}

.text-input {
    width: 100%;
    border: none;
    padding: .8rem;
    border-radius: .5rem;
    margin-bottom: .8rem;
}

.campo textarea {
    height: 17rem;
}

@media(min-width: 768px) {
    .contenedor-campos {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        grid-template-rows: auto auto 20rem;
        gap: 1rem;
    }

    .campo:nth-child(3),
    .campo:nth-child(4) { 
        grid-column: 1 / 3;
    }
}

.footer {
    text-align: center;
}

/* NOTAS Y CONSIDERACIONES SOBRE CSS

* Cuando usamos el selector universal estamos indicando al navegador que a todas las estiquetas de ese tipo en el documento
  tomen el siguiente estilo. De lo contrario, cuando utilizamo otra forma, estamos indicando al navegador que se va a aplicar
  dicho estilo pero en determinada etiqueta hija de una etiqueta padre.

* SELECTORES EN CSS: permiten seleccionar etiquetas del documento html 
    1. selector de elemento: 
    p { 
        clave:valor;
    }

    2. selector de clase:
    .persona {
        clave:valor;
     }

    3. selector de id:
    #id {
        clave:valor;
    }

    4. Selector de atributo:
    [src="logo.jpg"] {
        clave:valor;
    }

    Aparte de estos tipos de selectores, existe la manera de aplicar una selección descendiente y una selección de todos los hijos.
    La selección descendiente por ejemplo, consiste en seleccionar todos los elementos (etiquetas) que tengan una clase o id específico
    que descienda de un padre.

    el caso de ejemplo en selección en descendencia:

    .contenedor .titulo {
        clave:valor;
    }

    Lo que se va a hacer es seleccionar aquellos elementos en el cual el padre sea la clase contenedor y además tengan como nombre de clase
    la clase .titulo. dicha clase puede ser incluso una etiqueta diferente.

    Para aplicar la selección de todos los hijos, se aplica de la siguiente manera:

    .contenedor > p {
        clave:valor;
    }

    * Especificidad: ¿Que es la especificidad en css?, bien, dado que css es una hoja de estilos en cascada, esto quiere decir
      que se aplican los estilos de arroba hacia abajo, la especificidad indica cuales serán las propiedad que se le aplicarán a determinados elementos
      en base a su especificación. Esto quiere decir que si tenemos dos selectores para un mismo elemento, se aplicarán dichas propiedades del selector
      que sea más específico sin importar el orden en el cual fue escrito, por ejemplo:

    p {
        color:"yellow";
    }

    p.principal {
        color:"black"
    }

    Para concluir con la especificidad, esto quiere decir que se aplican las propiedades a los elementos que sean más específicos que otros.

    * PseudoElemento: son aquellos elementos que no existen en el documento HTML.
    
    * CustomProperties: son aquellas propiedades que podemos personalizar para poderlas utilizar en determinados elementos cuando su uso es constantes e igual.

    * ¿Qué es normalize? dado que los diferentes navegadores interpretan de diferente manera las etiquetas, normalize nos permite hacer que los 
    elementos que se muestran sean de manera consistente para cualquier tipo de navegador.

    * Todos los elementos en HTMl cuentan con un tipo de display por defecto. Actualmente contamos con el display block y display inline.
    display block: permite mostrar elementos uno de bajo del otro ocasionando que el elemento tome toda la línea o espacio del navegador.
    display inline: permite mostrar elementos uno seguido del otro ya que inline quiere decir en línea.
    Por defualt, todos los elementos o etiquetas de HTML cuentan con un tipo de display; en caso de requerir modificarlo, hacerlo.

    * ¿Qué es flexbox?: flexbox es una propiedad que nos permite modificar las propiedades de un elemento. flexbox actualmente cuenta con
    ejes y direcciones. los ejes a utilizar son: row y column, y las direcciones son: row, row-revere, column, column-reverse.
    En otras palabras, flexbox nos permite modificar la horientación de un conjunto de elementos.

    * Formas de escribir código CSS: las formas en las que podemos escribir código CSS son las siguientes:
    1. BEM: Bloques, Elementos y Modificadores, esta forma nos permite tener de manera súper clara las funciones o acciones que cumplen 
    cada bloque de código.

    .card { } ----> bloque

    .card__titulo { } --------> Elemento

    .card__imagen { } --------> Elemento

    .card__imagen--activo { } ----> modificadores

    2. Utility first: es cuando solamente escribimos una propiedad en un elemento o etiqueta.

    3. Módulos: consiste en crear módulos o clases en la cual accedamos a los elementos (etiquetas) contenidos en dicha clase por medio
    de sus nombre de etiqueta.

    .principal { }

    .principal p { }

    .principal a { }

    * MediaQuery: un media query es una porción de código CSS que se ejecuta cuando se cumple cierta condición. Estos media query están
    diseñados para hacer que nuestros sitios web sean responsive (adaptable a cualquier tipo de dispositivo).
    Por convención los media query se agregan seguido de la sección que modifican el elemento para un determinado dispositivo.

    Usualmente, la cantidad de pixeles definida para los diferentes tipos de dispositivos son:

    - 480px: dispositivos móviles
    - 768px: tablets
    - 

    * Imágenes con CSS: para agregar una imagen de fondo en una determinada sección del documento, lo podemos hacer mediante
    CSS. Para ello, seleccionamos la clase de dicha sección, usamos la propiedad 'background-image: url()' y la agregamos al documento.
    En caso de que uno como usuario intente hacer más chico el navegador (alejar) podemos hacer que la imagen no se repita  mediante la
    propiedad 'backgorund-repeat: no-repeat', y para que la imagen se ajuste al tamaño de la pantalla, tenemos que usar la propiedad
    background-size: cover.

    * Box model o modelo de caja: todos los elementos html se representan como cajas. Estas cajas cuentan con medidas que permiten determinar
    el tamaño total del elemento; estas son: tamaño del contenido, padding, border, margin. Si nosotros queremos establecer una medida específica
    para un determinado elemento lo que tenemos que hacer es agregar un hack para que las medidas del elemento que establescamos sean siempre las
    mismas sin importar el padding, border, y margin.


*/